{
  "name": "esparse-cl2",
  "description": "Parse/generate javasript through STDIN, STDOUT",
  "version": "0.0.1",
  "bin": {
    "esparse-cl2": "./bin/esparse.js",
    "escodegen-cl2": "./bin/escodegen.js"
  },
  "dependencies": {
    "esprima": "1.0.1",
    "escodegen": "0.0.12",
    "optimist": "0.6.0"
  },
  "readme": "# Esparse-cl2\nJavascript to/from JSON s-expressions to use with Chlorinate\n\n## Usage\n```bash\necho 'var x = 0;' | esparse-cl2\n```\n{"type":"Program","body":[{"type":"VariableDeclaration","declarations":[{"type":"VariableDeclarator","id":{"type":"Identifier","name":"x"},"init":{"type":"Literal","value":0}}],"kind":"var"}]}\n\n```bash\necho '{"type":"Program","body":[{"type":"VariableDeclaration","declarations":[{"type":"VariableDeclarator","id":{"type":"Identifier","name":"x"},"init":{"type":"Literal","value":0}}],"kind":"var"}]}' | escodegen-cl2\n```\nvar x = 0;\n\n## Command Line Options\nescodgen-cl2 now takes some command line options to help you build source maps. The options are:\n```bash\n--js_ast\n```\nthe path/file which contains the javascript parser api Abstract Syntax Tree which is normally piped into escodegen-cl2 (if this is omitted the input will be taken from stdin)\n```bash\n--js_output\n```\nthe path/file to write the javascript out to\n```bast\n--source_file\n```\nthe path/file to the original source which the source map maps back to\n```bash\n--source_map\n```\nthe path/file to which the source map should be written out\n\nThe ``--source_file`` and ``--source_map`` options are not independent - if one is specified then the other must be as well\n\n\n## License: MIT\n",
  "readmeFilename": "README.md",
  "_id": "esparse-cl2@0.0.1",
  "_from": "esparse-cl2@"
}
